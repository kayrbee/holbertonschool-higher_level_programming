"""
Test the matrix_dvided function.
Write a function that divides all elements of a matrix.

Prototype: def matrix_divided(matrix, div):
matrix must be a list of lists of integers or floats, otherwise raise a TypeError exception with the message matrix must be a matrix (list of lists) of integers/floats
Each row of the matrix must be of the same size, otherwise raise a TypeError exception with the message Each row of the matrix must have the same size
div must be a number (integer or float), otherwise raise a TypeError exception with the message div must be a number
div canâ€™t be equal to 0, otherwise raise a ZeroDivisionError exception with the message division by zero
All elements of the matrix should be divided by div, rounded to 2 decimal places
Returns a new matrix
"""

"""
Import ``matrix_divided`` from `2-matrix_divided``
>>> m_divide = __import__('2-matrix_divided').matrix_divided

Tests
Happy path
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

>>> m_divide(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Divide by 0
>>> m_divide(matrix, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

Div is not a number
>>> m_divide(matrix, "0")
Traceback (most recent call last):
...
TypeError: div must be a number

To do:
# m_divide(matrix, 2)
# [[0.5, 1.0, 1.33], [2.0, 2.66, 3.0]]

"""